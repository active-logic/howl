⊐ InvOp = System.InvalidOperationException;
⊐ ArgEx = System.ArgumentException;
⊐ NUnit.Framework;
⊐ Active.Howl; ⊐̥ Active.Howl.Path;

⊓ Unit{ ‒ ○ PathTest : TestBase {

    #if UNITY_EDITOR

    ؟ BuildPath_dir
    ⎚ o( $"{howlRoot}Pkg/".BuildPath(), $"{buildRoot}Pkg/" );

    ؟ BuildPath_dir_no_final_sep
    ⎚ o( $"{howlRoot}Pkg".BuildPath(), $"{buildRoot}Pkg" );

    ؟ BuildPath_file()
    → o($"{howlRoot}x.howl".BuildPath(), $"{buildRoot}x.cs");

    ؟ BuildPath_file_in_dir()
    → o($"{howlRoot}Runtime/x.howl".BuildPath(),
         $"{buildRoot}Runtime/x.cs");

    ؟ BuildPath_file_w_full_path(){
        ∙ ㅂ = "Assets/Howl/x.howl".FullPath();
        ∙ ㄸ = ㅂ.BuildPath();
        o(ㄸ, $"{buildRoot}Howl/x.cs");
    }

    ؟ BuildRoot ⎚ o( buildRoot, "Assets/Howl/~build/" );

    ؟ DefaultHowlRootPath ⎚ o( defaultHowlRoot, "Assets/Howl.Howl/");

    ؟ HasBuildImage_accept_existing_dir
    ⎚ o( $"{howlRoot}Howl/Editor/Util/".HasBuildImage() );

    ؟ HasBuildImage_accept_existing_file
    ⎚ o( $"{howlRoot}Howl/Editor/Util/Cache.howl".HasBuildImage() );

    ؟ HasBuildImage_reject_asset_from_build_dir
    ⎚ o( !$"{buildRoot}/Howl/Editor/Util/Cache.cs".HasBuildImage() );

    ؟ HasBuildImage_reject_asset_without_howl_root
    ⎚ o( !$"{howlRoot}/../Cache.howl".HasBuildImage() );

    ؟ HasBuildImage_reject_non_existent_file
    ⎚ o( !$"{howlRoot}Howl/Editor/Util/Dash.howl".HasBuildImage() );

    ؟ IsHowlBound
    ⎚ o( $"{buildRoot}Howl/Editor/Util/Cache.cs".IsHowlBound() );

    ؟ IsHowlBound_false ⎚ o( !$"Assets/Foo.cs".IsHowlBound() );

    ؟ MetaFile1 ⎚ o( "Assets/Foo.cs".MetaFile(), ∅ );

    ؟ MetaFile2 ⎚ o( "Assets/Howl".MetaFile(), "Assets/Howl.meta" );

    ؟ MetaFile3 ⎚ o( "Assets/Howl/".MetaFile(), "Assets/Howl.meta");

    ؟ ProjectName ⎚ o (projectName, "Howl");

    ؟ SourcePath ⎚ o( $"{buildRoot}Pkg/Test.cs".SourcePath(),
                      $"{howlRoot}Pkg/Test.howl");

    ؟ SourcePath_dir1 ⎚ o( $"{buildRoot}Pkg/".SourcePath(),
                      $"{howlRoot}Pkg/");

    ؟ SourcePath_dir2 ⎚ o( $"{buildRoot}Pkg".SourcePath(),
                      $"{howlRoot}Pkg");

    ؟ SourcePath_BadInput
    ⎚ ಠᴗಠ <ArgEx>(  ⎚ "Foo/Bar/Pkg/Test.cs".SourcePath() );

    #endif

    ؟ BuildPath_reject_bad_extension
    ⎚ ಠᴗಠ<InvOp>( () → "x.foo".BuildPath() );

    ؟ BuildPath_bad_root
    ⎚ ಠᴗಠ <InvOp>( () → "Fakeroot/x.howl".BuildPath() );

    ؟ HowlRoot() → o( howlRoot, "Assets/" );

    ؟ PathToMetaFile1 ⎚ o( "Assets/Foo.cs".PathToMetaFile(),
                           "Assets/Foo.cs.meta" );

    ؟ PathToMetaFile2 ⎚ o( "Assets/Foo/".PathToMetaFile(),
                           "Assets/Foo.meta" );

    ؟ SetExtension ⎚ o( "Bumblebee.gif".SetExtension(".tiff"),
                        "Bumblebee.tiff" );

    ؟ IsHowlSource_file(){
        ∙ π = $"{howlRoot}Test.howl";
        o(π.IsHowlSource(), ✓);
        o(π.FullPath().IsHowlSource(), ✓);
    }

    ؟ IsHowlSource_reject_non_howl_files
    ⎚ o( $"{howlRoot}Test.gif".IsHowlSource(), ✗ );

    ؟ IsHowlSource_reject_dirs(){
        ∙ π = $"{howlRoot}Pkg/Dir";
        o(π.IsHowlSource(), ✗);
        o(π.FullPath().IsHowlSource(), ✗);
    }

    ؟ Nix() → o("Assets\\Howl".Nix(), "Assets/Howl");

    ؟ NoFinalSep([Values("Foo/", "Foo")] ㄹ x)
    → o( x.NoFinalSep() , "Foo");

    ؟ NoFinalSep_BS() → o( ("Foo" + '\\').NoFinalSep() , "Foo");

    ؟ RelativeTo_0
    ⎚ o("Assets/Pkg/Foo/Bar".RelativeTo("Assets/Pkg"), "Foo/Bar");

    ؟ RelativeTo_1
    ⎚ o("Assets/Howl/Editor/Unity/Config.cs"
      .RelativeTo("Assets/Howl/Editor/Unity"), "Config.cs");

}}
