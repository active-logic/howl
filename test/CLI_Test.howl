⊐ NUnit.Framework;
⊐ Active.Howl;

⊓ Unit{
‒ ○ CLI_Test : TestBase{

    CLI ι;

    ⍜ Setup(){ ι = ⌢ CLI(dry: ✗); MkProj(); }

    ⍉ Teardown ⎚ DelProj();

    ؟ Main ⎚ CLI.Main(⌢ ㄹ[]{});

    // ==============================================================

    ؟ Build(){
        ι.Build(∅, "Mudbox/src");
        o( "Mudbox/src/build/Main.cs".∃() );
        o( "Mudbox/src/build/build.csproj".∃() );
        o( "Mudbox/src/build/bin".∃() );
        o( "Mudbox/src/build/obj".∃() );
    }

    // --------------------------------------------------------------

    ؟ Export(){
        o( ι.Export(∅, "Mudbox/src", "Mudbox/build"),
           "Exported Main.howl");
        o( "Mudbox/build/Main.cs".∃() );
    }

    // --------------------------------------------------------------

    // TODO - Install is platform specific and so is the test

    ؟ Install(){
        ι.Install(∅, "Mudbox");
        o( $"Mudbox/src/build/bin/Release/{publishPath}/build".∃() );
        o( "/usr/local/bin/mudbox".∃() );
    }

    ؟ Publish(){
        ι.Publish(∅, "Mudbox/src");
        o(  $"Mudbox/src/build/bin/Debug/{publishPath}/build".∃() );
        o( !$"Mudbox/src/build/bin/Release/{publishPath}/build".∃() );
    }

    ㄹ publishPath → "netcoreapp3.1/osx-x64/publish";

    // --------------------------------------------------------------

    // TODO - Check tests actually build and run
    ؟ Test(){
        ι.Test(∅, "Mudbox");
        o( "Mudbox/build/src".∃() );
        o( "Mudbox/build/test".∃() );
        o( "Mudbox/build/Main.sln".∃() );
        o( "Mudbox/build/src/src.csproj".∃() );
        o( "Mudbox/build/test/test.csproj".∃() );
    }

    // ==============================================================

    ┈ MkProj(){
        "Mudbox/src".MkDir();
        "Mudbox/src/Main.howl".Write("‒○ Bar{∘ ┈ Main(ㄹ[] args){}}");
    }

    ┈ DelProj ⎚ "MudBox".RmDir(dry: ✗);

}}
