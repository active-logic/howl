⊐ NUnit.Framework;
⊐ Active.Howl;

⊓ Unit{
‒ ○ CLI_Test : TestBase{

    CLI ι;

    ⍜ Setup(){ ι = ⌢ CLI(dry: ✗); MkProj(); }

    ⍉ Teardown ⎚ DelProj();

    ㄹ publishPath      → $"netcoreapp3.1/{OS.runtime}/publish";
    ㄹ publishPathNoRID → $"netcoreapp3.1/publish";

    // ==============================================================

    // Ensure no-arg run displays version number and doc
    ؟ MainCmd ⎚ CLI.Main(⌢ ㄹ[]{});

    // --------------------------------------------------------------

    ؟ BuildCmd(){
        ι.Build(∅, "Mudbox");
        ∃( "Mudbox/build/Main.sln",
           "Mudbox/build/src/Main.cs",
           "Mudbox/build/src/src.csproj",
           "Mudbox/build/src/bin/Debug",
           "Mudbox/build/src/obj/Debug" );
    }

    // TODO - Install is platform specific and so is the test
    /* QUARANTINE (n/a on nix)
    ؟ CLI_Install(){
        ι.Install(∅, "Mudbox");
        ∃( $"Mudbox/build/src/bin/Release/{publishPath}/src",
            "/usr/local/bin/mudbox" );
        o( Runner.Cmd("foobar", "", workdir: "/", dry: ✗) ≠ 0 );
        o( Runner.Cmd("mudbox", "", workdir: "/", dry: ✗) ☰ 0 );
        // Clean
        $"Mudbox/build/src/bin".RmDir(dry: ✗);
        $"/usr/local/bin/mudbox".JustDelete(dry: ✗);
    }
    */

    ؟ PublishCmd(){
        ι.Publish(∅, "Mudbox");
        ∙ ext  = OS.runtime ☰ OS.Windows ? ".exe" : "";
        ∙ path = OS.runtime ☰ OS.MacOS ? publishPath
                                       : publishPathNoRID;
        ∃( $"Mudbox/build/src/bin/Debug/{path}/src{ext}" );
    }

    // TODO differentiate `Run` from `Build`
    ؟ RunCmd(){
        o( ι.Build(∅, "Mudbox") );
        ∃( "Mudbox/build/Main.sln",
           "Mudbox/build/src/Main.cs",
           "Mudbox/build/src/src.csproj",
           "Mudbox/build/src/bin/Debug",
           "Mudbox/build/src/obj/Debug" );
    }

    // TODO - Check tests actually build and run
    ؟ TestCmd(){
        ι.Test(∅, "Mudbox");
        ∃( "Mudbox/build/src",
           "Mudbox/build/test",
           "Mudbox/build/Main.sln",
           "Mudbox/build/src/src.csproj",
           "Mudbox/build/test/test.csproj" );
    }

    // --------------------------------------------------------------

    ؟ VersionCmd ⎚ o( ι.Version(∅, "Mudbox", "major") );

    // --------------------------------------------------------------

    ؟ ExportCmd(){
        o( ι.Export(∅, "Mudbox/src", "Mudbox/build") );
        ∃( "Mudbox/build/Main.cs" );
    }

    // ==============================================================

    ┈ MkProj(){
        "Mudbox/src".MkDir();
        "Mudbox/src/Main.howl".Write("‒○ Bar{∘ ┈ Main(ㄹ[] args){}}");
        "Mudbox/package.json".Write(VersioningTest.data);
    }

    ┈ DelProj(){
        // Cleaning everything takes too long because of dotnet new
        // "MudBox".RmDir(dry: ✗);
        ⤴ ( !"MudBox".IsDir() ) ⮐ ;
        "MudBox".DeleteFiles("*.cs", withMetaFile: ✗);
        "MudBox".DeleteFiles("*.howl", withMetaFile: ✗);
    }

}}
