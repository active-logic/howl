⊐ NUnit.Framework;
⊐ Active.Howl;

⊓ Unit{
‒ ○ BuilderTest : TestBase{

    Builder β;

    ⍜ Setup ⎚ β = ⌢ Builder();

    ؟ Build(){
        $"~/Sandbox/src/Main.howl"
        .Write("‒ ○ Bar{ ∘ ┈ Main(ㄹ[] args){} }");
        o( β.Build("~/Sandbox"), 0);
    }

    ؟ Install(){
        $"~/Sandbox/src/Main.howl"
        .Write("‒ ○ Bar{ ∘ ┈ Main(ㄹ[] args){} }");
        o( β.Install("~/Sandbox"), 0);
    }

    ؟ Publish(){
        $"~/Sandbox/src/Main.howl"
        .Write("‒ ○ Bar{ ∘ ┈ Main(ㄹ[] args){} }");
        o( β.Publish("~/Sandbox"), 0);
    }

    ؟ Run(){
        o( β.Run("~/Sandbox"), 0);
        $"~/Sandbox/src/Main.howl"
        .Write("‒ ○ Bar{ ∘ ┈ Main(ㄹ[] args){} }");
        // TODO should be zero... ?
        o( β.Run("~/Sandbox"), 0);
    }

    ؟ Test ⎚ o( β.Test("~/Sandbox"), 0);

    ؟ ProjectName ⎚ o( β.ProjectName("~/Sandbox"), "sandbox");

    ؟ Solution(){
        ∙ π = "~/Sandbox";
        π.MkDir();
        ᆞ val = β.Solution("~/Sandbox", dry: ✗);
        o( $"{π}/Main.sln".∃() );
        o( $"{π}/src".∃() );
        o( $"{π}/src/src.csproj".∃() );
        o( $"{π}/test/test.csproj".∃() );
    }

    ؟ Update(){
        "Sandbox/src".MkDir();
        "Sandbox/test".MkDir();
        //
        "Sandbox/src/A.howl".Write("○ A{}");
        "Sandbox/src/X.cs".Write("○ X{}");
        "Sandbox/test/TestA.howl".Write("○ TestA{}");
        β.Update("Sandbox");
        ∃( "Sandbox/build/src/A.cs", "Sandbox/build/test/TestA.cs" );
        //
        "Sandbox/src/A.howl".JustDelete(dry: ✗);
        "Sandbox/test/TestA.howl".JustDelete(dry: ✗);
        β.Update("Sandbox");
        // Stale C# output must not remain
        o( "Sandbox/build/src/A.cs".∃(), ✗);
        o( "Sandbox/build/test/TestA.cs".∃(), ✗);
        // Do not accidentally delete C# input, if any
        ∃( "Sandbox/src/X.cs" );
        "Sandbox".RmDir(dry: ✗);
    }

}}
