⊐ System.Collections.Generic;
⊐ Ex = System.Exception; ⊐ InvOp = System.InvalidOperationException;
#if UNITY_EDITOR
⊐ UnityEngine; ⊐ UnityEditor;
⊐ S = Active.Howl.Messages;
#endif
⊐̥ Active.Howl.Path ;

⊓ Active.Howl{
‒̥ ○ Howl{

    ‒̥ ㅇ warnings = ✓;
    ∘ Map map = Map.@default;

    // --------------------------------------------------------------

    #if UNITY_EDITOR

    ‒̥ ┈ ExportAll(){
        🐰 "Convert *.howl scripts to C# 〜 (;ω;)";
        ExportDir("Assets/", verbose: ✓);
    }

    ‒̥ ┈ ImportAll(){
        🐰 "Convert *.cs scripts to Howl 〜 (╯°□°)╯ ⌢ C#";
        ImportDir("Assets/", verbose: ✓);
    }

    ‒̥ ┈ ReApply(){
        🐰 "Apply notation";
        FileSystem.Paths(Path.howlRoot, "*.howl")
                  .ForEach(ReimportFile);
    }

    ‒̥ ┈ Refresh(){
        🐰 "Refresh";
        Rebuild(quick: ✓);
    }

    ‒̥ ┈ Rebuild(){
        🐰 "Rebuild";
        // Do not delete metafiles on rebuild or scene scripts unbind
        Path.buildRoot.DeleteFiles("*.cs", withMetaFile: ✗);
        Rebuild(quick: ✗);
    }

    ‒̥ ┈ Rebuild(ㅇ quick){
        ∀ (∙ x ∈ FileSystem.Paths(Path.howlRoot, "*.howl")){
            ⤴(!quick ∨ x.DateModified() > Config.ι.lastExportDate){
                🐰 $"Building {x.FileName()}";
                BuildFile(x);
            }
        } AssetDatabase.Refresh();
    }

    #endif

    // --------------------------------------------------------------

    ‒̥ ┈ BuildFile(ㄹ ㅂ){
        ⤴ (!ㅂ.IsHowlSource())
            🔸($"{ㅂ} should be under {howlRoot}...");
        ⤵ BuildFile(ㅂ, ㅂ.BuildPath());
    }

    ‒̥ ㄹ BuildFile(ㄹ ㅂ, ㄹ ㄸ){
        ㄹ x = ㅂ.Read();
        ⤴ (x.StartsWith(cerberusWard)) ⮐ DismissCerberus(x, ㄸ);
        ㄹ y = ExportAsIs(x) ? x : x * map;
        ㄸ?.Write(y, date: ㅂ.DateModified());
        ⮐ y;
    }

    // --------------------------------------------------------------

    // TODO - from Builder.howl, compared to other methods, somewhat
    // different contract
    ‒̥ ㅇ Export(ㄹ src, ㄹ dst){
        src = src.WithFinalSep();
        dst = dst.WithFinalSep();
        ⤴ (!src.IsDir()){ 🐰$"Source dir not found: {src}\n"; ⤬ }
        ∙ paths = FileSystem.Paths(src, "*.howl");
        ∀ (∙ x ∈ paths){
            ∙ y = dst + x.RelativeTo(src).SetExtension(".cs");
            Howl.BuildFile(x, y);
        } ㆑
    }

    ‒̥ ┈ ExportDir(ㄹ π, ㅇ verbose=✗)
    → FileSystem.Paths(π, "*.howl", "*.asmdt").ForEach(ExportFile);

    ‒̥ ┈ ExportFile(ㄹ π){
        #if UNITY_EDITOR
        ⤴ (!Config.ι.allowExport) (╯°□°)╯⌢ Ex(S.EnableExport);
        #endif
        ExportFile(π, dry: ✗);
    }

    ‒̥ ㄹ ExportFile(ㄹ π, ㅇ dry){
        ⤴ (π.TypeIs(_Asmdt)) ⮐ ExportAssemblyDefToken(π, dry);
        ∙ σ = π.SetExtension(Path._Cs);
        BuildFile(π, dry ? ∅ : σ);
        ∙ θ = σ.BuildPath();
        ⤴ (!dry){
            ⤴ (θ.Exists()){
                θ.Delete(withMetaFile: ✗);
                ∙ m0 = θ.MetaFile();
                ∙ m1 = σ.PathToMetaFile();
                ⤴ (m0 ≠ ∅) System.IO.File.Move(m0, m1);
            }
            π.Delete(withMetaFile: ✓);
        }
        ⮐ dry ? $"Export\n{π} as\n{σ} and move it to\n{θ}" : ∅;
    }

    ‒̥ ㄹ ExportAssemblyDefToken(ㄹ π, ㅇ dry){
        ∙ σ = π.SetExtension(Path._Asmdef);
        ∙ θ = σ.BuildPath();
        ⤴ (!dry){
            θ.MoveTo(σ, withMetaFile: ✓);
            π.Delete(withMetaFile: ✓);
        }
        ⮐ dry ? $"Rename {θ} to\n{σ}\nand delete {π}" : ∅;
    }

    // --------------------------------------------------------------

    ‒̥ 𝕃<ㄹ> ImportDir(ㄹ ㅂ, ㄹ ext= "*.cs", ㅇ dry = ✗, ㅇ verbose = ✗){
        ∙ conflicts = ⌢ 𝕃<ㄹ>();
        ∀ (∙ π ∈ FileSystem.Paths(ㅂ, ext, "*.asmdef")){
            ⤴ (π.In(Path.buildRoot)) continue;
            ↯ {
                ImportFile(π, dry);
            } ⇤ (InvOp ex){
                conflicts.Add($"{π} has conflicts\n{ex.Message}");
            }
        }
        ⤴ (conflicts⁝ > 0 ∧ verbose) ∀ (∙ k ∈ conflicts) 🦞 k;
        ⮐ conflicts;
    }

    ‒̥ ┈ ImportFile(ㄹ π){
        #if UNITY_EDITOR
        ⤴ (!Config.ι.allowImport) (╯°□°)╯⌢ Ex(S.EnableImport);
        #endif
        ImportFile(π, dry: ✗);
    }

    ‒̥ ㄹ ImportFile(ㄹ π, ㅇ dry){
        ⤴ (π.TypeIs(Path._Asmdef)) ⮐ ImportAssemblyDefToken(π, dry);
        ∙ σ = π.SetExtension(Path._Howl);
        ImportFile(π, dry ? ∅ : σ);
        ∙ θ = σ.BuildPath();
        ⤴ (!dry) π.MoveTo(θ, withMetaFile: ✓);
        ⮐ dry ? $"Import\n{π} as\n{σ} and move it to\n{θ}" : ∅;
    }

    ‒̥ ㄹ ImportAssemblyDefToken(ㄹ π, ㅇ dry){
        ∙ σ = π.SetExtension(Path._Asmdt);
        ∙ θ = π.BuildPath();
        ⤴ (!dry){
            π.MoveTo(θ, withMetaFile: ✓);
            σ.Write("Assembly def token\n");
        }
        ⮐ dry ? $"Rename {π} to\n{θ}\nand create {σ}" : ∅;
    }

    ‒̥ ㄹ ImportFile(ㄹ ㅂ, ㄹ ㄸ){
        ㄹ y = ImportString(ㅂ.Read(), fromPath: ㅂ);
        ㄸ?.Write(y, date: ㅂ.DateModified());
        ⮐ y;
    }

    ‒̥ ㄹ ImportString(ㄹ x, ㄹ fromPath=∅){
        ㄹ y = ImportAsIs(x) ? x : x / map;
        ⤴ ( x ≠ y * map){
            y = WithCerberusWard(x);
            ⤴ (fromPath ≠ ∅) 🐤 $"{Wards.Cerberus} 〜 {fromPath}";
        }
        ⮐ y;
    }

    // --------------------------------------------------------------

    // TODO ensure no double nitpick
    ‒̥ ㄹ NitPick(ㄹ ㅂ, ㄹ ㄸ = ∅, ㅇ force = ✗){
        ㄹ x = ㅂ.Read();
        ㄹ y = (NitPickAsIs(x) ∧ !force) ? x : x % map;
        ⤴ (x ≠ y) (ㄸ ?? ㅂ).Write(y);
        ⮐ y;
    }

    // --------------------------------------------------------------

    ‒̥ ┈ ReimportFile(ㄹ π){ ReimportFile(π, ✗); }

    ‒̥ ㄹ ReimportFile(ㄹ π, ㅇ dry){
        ㄹ e = BuildFile(π, ∅);
        ㄹ ㄸ = ImportString(e);
        ⤴ (!dry) π.Write(ㄸ);
        ⮐ ㄸ;
    }

    // --------------------------------------------------------------

    ‒̥ ㄹ DismissCerberus(ㄹ x, ㄹ ㄸ){
        ⟲ (x.StartsWith(cerberusWard))
            x = x.Substring(cerberusWard❙);
        ㄸ?.Write(x, mkdir: ✓, importAsset: ✓);
        ⮐ x;
    }

    ‒̥ ㅇ ExportAsIs(ㄹ x) → x.∋(Wards.Cerberus);

    ‒̥ ㅇ ImportAsIs(ㄹ x) → x.∋(Wards.GardenOfEden) ∨ x.∋(Wards.Tengu);

    ‒̥ ㅇ NitPickAsIs(ㄹ x) → ImportAsIs(x) ∨ ExportAsIs(x);

    ‒̥ ㄹ WithCerberusWard(ㄹ x)
    → x.StartsWith(cerberusWard) ? x : cerberusWard + x;

    ‒̥ ㄹ cerberusWard → Wards.Cerberus.Comment();

}}
