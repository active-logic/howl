⊐ InvOp = System.InvalidOperationException;
⊐ System.Collections ;
⊐ System; ⊐ System.Collections.Generic; ⊐ System.Linq;
⊐ System.Text;

⊓ Active.Howl {
‒ ᴾ ○ Map : IEnumerable{

    ‒ Rep[] declarative, rules;

    // Factory ------------------------------------------------------

    ⒤ Map(Rep[] ⧕)
    → ⌢ Map(){ declarative = ⧕, rules = Rep.Reorder(⧕) };

    // Operators ----------------------------------------------------

    ‒̥ ㄹ   ⨕ * (ㄹ x, Map y) → Forw(y.Consolidate(x), y.rules);

    ‒̥ ㄹ   ⨕ / (ㄹ x, Map y) → Rev(x, y.rules);

    ‒̥ ㄹ[] ⨕ / (ㄹ[] A, Map y) → (‖ x ∈ A ▸ x / y)৴;

    ‒̥ ㄹ   ⨕ % (ㄹ x, Map y) → Rev(x, y.nits, ignoreConflicts: ✓);

    ‒̥ ㄹ[] ⨕ ! (Map m) → (‖ x ∈ m.rules ¿ !x ▸ x.a)৴;

    // Functions ----------------------------------------------------

    ‒ ┈ Rebuild(Rep[] ⧕) { declarative = ⧕; rules = Rep.Reorder(⧕); }

    // Get information ----------------------------------------------

    ‒ ᆞ count → rules❙;

    ‒ ㅇ integer{ ╭{
        ∙ @set = ⌢ 𝕄 <ㄹ, 𝕃<Rep>>();
        ∀(∙ x ∈ rules){
            𝕃 <Rep> γ = @set.⋺(x.a)
                      ? @set[x.a] : @set[x.a] = ⌢ 𝕃<Rep>();
            γ.Add(x);
        }
        ㅇ hasConflicts = ✗;
        ∀(∙ z ∈ @setᖾs){
            ⤴(z⁝ > 1){
                // TODO who should see this?
                🔸($"[{z[0].a}] has conflicts ({z.Count})");
                hasConflicts = ✓;
            }
        }
        ⮐ !hasConflicts;
    }}

    // TODO: return IEnumerable instead
    ‒ Rep[] nits
    → (‖ ρ ∈ rules ¿ ρ.nit ▸ ρ)৴;

    ‒ Rep[] ForClass(ㄹ @class)
    → (‖ ρ ∈ rules ¿ ρ._class ☰ @class ▸ ρ)৴;


    ‒ ᆞ ⦿[ㄹ key]{╭{
        ⟳(ᆞ i = 0; i < rules❙; i++){
            ⤴(rules[i].ValueMatches(key)) ⮐ i;
        }
        (╯°□°)╯ ⌢ InvOp("Bad Key");
    }}

    ‒ Rep Rule(ㄹ key){
        ⟳(ᆞ i = 0; i < rules❙; i++){
            ⤴(rules[i].ValueMatches(key)) ⮐ rules[i];
        }
        (╯°□°)╯ ⌢ InvOp("Bad Key");
    }

    ‒ IEnumerator GetEnumerator() → declarative.GetEnumerator();

    // IMPLEMENTATION -----------------------------------------------

    ‒̥ ㄹ Forw(ㄹ x, Rep[] ρ){
        ∙ ㄸ = ⌢ StringBuilder();
        ∀(∙ θ ∈ x.Break(defs))
            ㄸ.±(θ.DenotesBlock(defs) ? θ : ForwChunk(θ, ρ));
        ⮐ ㄸ🝠;
    }

    ‒̥ ㄹ Rev(ㄹ x, Rep[] ρ, ㅇ ignoreConflicts=✓){
        ∙ ㄸ = ⌢ StringBuilder();
        ∀(∙ θ ∈ x.Break(defs))
            ㄸ.±(θ.DenotesBlock(defs) ? θ
            : RevChunk(θ, ρ, ignoreConflicts));
        ⮐ ㄸ🝠;
    }

    ∘ ㄹ ForwChunk(ㄹ x, Rep[] ρ){
        ∀(∙ r ∈ ρ) x *= r;
        ⮐ x;
    }

    ∘ ㄹ RevChunk(ㄹ x, Rep[] ρ, ㅇ ignoreConflicts){
        ㄹ[] tokens = x.Tokenize();
        𝕃<ㄹ> conflicts = ∅;
        ∀(∙ r ∈ ρ){
            ↯{
                tokens = Rep.Rev(tokens, r, ignoreConflicts);
                // TODO - not ready for this
                tokens =  Modifiers.NitpickSegment(tokens);
            }⇤(InvOp ex){
                ⤴(conflicts ☰ ∅) conflicts = ⌢ 𝕃<ㄹ>();
                conflicts.Add(ex.Message);
            }
        }
        ⤴(conflicts ≠ ∅) (╯°□°)╯
            ⌢ InvOp("\n" + conflicts৴.Join('\n'));
        ⮐ tokens.Join();
    }

    ‒ ㄹ Consolidate(ㄹ x){
        ∙ ㄸ = ⌢ StringBuilder();
        ∀(∙ θ ∈ x.Break(defs))
            ㄸ.±(θ.DenotesBlock(defs) ? θ : θ.Consolidate(!⦿));
        ⮐ ㄸ🝠;
    }

    ∘ ┈ Print(ㄹ x) → 🍥(x);

    // ==============================================================

    ‒̥ Block.Def[] defs = ⌢ Block.Def[]{
        ("\"","\""),  // string literal
        ("/*","*/"),  // C style comment
        "//",         // C++ style comment
        "#",          // Directive
    };

    ‒̥ Rep μ(ㄹ ㅂ, ㄹ ㄸ, ㄹ name=∅, ㄹ px=∅, ㄹ alt=∅, ㅇ? bridge=∅,ㅇ ι=✗,
         ㄹ H=∅, ㅇ π=✓, ㅇ ns=✗, ㅇ q=✗, ㄹ d=∅)
    → ⌢ Rep(ㅂ, ㄸ, name, px, alt, bridge, ι, H, π, ns, q, d);

}}
